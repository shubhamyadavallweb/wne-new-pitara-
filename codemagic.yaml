workflows:
  expo-android-release:
    # Builds the Expo Router app under newpitara/apps/mobile and outputs a signed release APK
    name: NewPitara – Android Release APK (Expo)
    max_build_duration: 90
    instance_type: mac_mini_m2
    
    environment:
      node: "18.18.0"     # Expo SDK 50 supports Node 18
      java: "17"          # Required by modern Android Gradle Plugin
      
      # Environment variables with user's custom group
      vars:
        PROJECT_DIR: "apps/mobile"
        NODE_OPTIONS: "--max_old_space_size=4096"
        NODE_ENV: "production"
        EXPO_NO_DOTENV: "1"
      
      # Use the environment group name
      groups:
        - x
        
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "main"
          include: true
      cancel_previous_builds: true
          
    scripts:
      # 1. Change to project directory
      - name: Change to project directory
        script: |
          cd "$PROJECT_DIR"
          echo "📁 Working directory: $(pwd)"

      # 2. Clean npm cache and install dependencies
      - name: Install npm dependencies
        script: |
          cd "$PROJECT_DIR"
          # Clean npm cache and start fresh
          npm cache clean --force
          # Install dependencies with legacy peer deps flag
          npm ci --legacy-peer-deps --no-audit --no-fund
          
      # 3. Install Expo CLI globally with specific version
      - name: Install Expo CLI
        script: |
          # Install specific Expo CLI version compatible with SDK 50
          npm install -g @expo/cli@^0.16.1
          # Verify installation
          npx expo --version
          echo "✅ Expo CLI installed successfully"

      # 4. Create .env file with environment variables (pulled from Codemagic secrets)
      - name: Set up environment variables
        script: |
          cd "$PROJECT_DIR"
          cat > .env << EOF
          EXPO_PUBLIC_SUPABASE_URL=$EXPO_PUBLIC_SUPABASE_URL
          EXPO_PUBLIC_SUPABASE_ANON_KEY=$EXPO_PUBLIC_SUPABASE_ANON_KEY
          SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY
          SUPABASE_ACCESS_TOKEN=$SUPABASE_ACCESS_TOKEN
          SUPABASE_PROJECT_REF=$SUPABASE_PROJECT_REF
          SUPABASE_DB_URL=$SUPABASE_DB_URL
          EXPO_PUBLIC_RAZORPAY_KEY=$EXPO_PUBLIC_RAZORPAY_KEY
          EXPO_PUBLIC_RAZORPAY_KEY_SECRET=$EXPO_PUBLIC_RAZORPAY_KEY_SECRET
          EXPO_PUBLIC_RAZORPAY_WEBHOOK_SECRET=$EXPO_PUBLIC_RAZORPAY_WEBHOOK_SECRET
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_SECRET=$EXPO_PUBLIC_GOOGLE_WEB_CLIENT_SECRET
          EXPO_PUBLIC_BYPASS_AUTH=$EXPO_PUBLIC_BYPASS_AUTH
          NIMBUS_USER=$NIMBUS_USER
          NIMBUS_AUTHKEY=$NIMBUS_AUTHKEY
          NIMBUS_SENDER=$NIMBUS_SENDER
          NIMBUS_ENTITYID=$NIMBUS_ENTITYID
          NIMBUS_TEMPLATEID=$NIMBUS_TEMPLATEID
          EOF
          echo "✅ Environment variables configured"

      # 5. Generate the native Android project (creates android/ folder)
      - name: Expo prebuild (Android)
        script: |
          cd "$PROJECT_DIR"
          # Clean node_modules/.cache folder to ensure fresh prebuild
          rm -rf node_modules/.cache
          # Generate native Android project with verbose logging
          npx expo prebuild --platform android --clean --non-interactive --no-install --verbose
          # Verify prebuild results
          if [ -d "android" ]; then
            echo "✅ Android prebuild completed successfully"
            # List the generated files for debugging
            ls -la android/
          else
            echo "❌ Android prebuild failed - android directory not created"
            exit 1
          fi

      # 6. Configure Android keystore for signing
      - name: Configure keystore for signing
        script: |
          cd "$PROJECT_DIR"
          mkdir -p android/app
          # Decode the base64 keystore file from environment variable
          echo "$CM_KEYSTORE" | base64 --decode > android/app/$CM_KEYSTORE_FILENAME
          # Configure gradle properties for signing
          cat >> android/gradle.properties <<EOF
          MYAPP_UPLOAD_STORE_FILE=app/$CM_KEYSTORE_FILENAME
          MYAPP_UPLOAD_STORE_PASSWORD=$CM_KEYSTORE_PASSWORD
          MYAPP_UPLOAD_KEY_ALIAS=$CM_KEY_ALIAS
          MYAPP_UPLOAD_KEY_PASSWORD=$CM_KEY_PASSWORD
          EOF
          echo "✅ Android keystore configured"

      # 7. Build APK only (improved error handling and cleanup)
      - name: Build Android APK
        script: |
          cd "$PROJECT_DIR"/android
          # Make gradlew executable
          chmod +x ./gradlew
          # Clean build first
          ./gradlew clean
          # Build APK for release
          echo "🔨 Building APK..."
          ./gradlew assembleRelease --no-daemon --stacktrace
          
          echo "✅ Build completed"
          
          # Show output files with complete paths for debugging
          find . -name "*.apk" | sort

      # 8. Copy APK to artifacts directory with improved path handling
      - name: Copy APK to artifacts directory
        script: |
          # Create artifacts directory
          mkdir -p $CM_BUILD_DIR/artifacts
          # Copy APK file (more specific path)
          find $PROJECT_DIR/android/app/build/outputs/apk -name "*.apk" -exec cp {} $CM_BUILD_DIR/artifacts/ \;
          # List copied files
          ls -la $CM_BUILD_DIR/artifacts/
          
          # Additionally copy to a known location for consistency
          cp $PROJECT_DIR/android/app/build/outputs/apk/release/app-release.apk $CM_BUILD_DIR/artifacts/pitara-release.apk || echo "Standard APK path not found"

    artifacts:
      # Multiple artifact paths to ensure capture
      - $PROJECT_DIR/android/app/build/outputs/apk/release/*.apk
      - $PROJECT_DIR/android/app/build/outputs/apk/debug/*.apk
      - $CM_BUILD_DIR/artifacts/*.apk 