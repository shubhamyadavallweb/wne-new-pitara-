workflows:
  expo-android:
    # Builds the Expo Router app under newpitara/apps/mobile and outputs an unsigned APK
    name: NewPitara ‚Äì Android APK (Expo)
    max_build_duration: 90
    instance_type: mac_mini_m2
    
    environment:
      node: "18.18.0"     # Expo SDK 52 supports Node 18
      java: "17"          # Required by modern Android Gradle Plugin
      
      # Environment variables that will be provided securely in Codemagic UI
      groups:
        - android_keystore   # CM_KEYSTORE, CM_KEYSTORE_FILENAME, CM_KEYSTORE_PASSWORD, CM_KEY_PASSWORD, CM_KEY_ALIAS
      
      vars:
        PROJECT_DIR: "apps/mobile"
        NODE_OPTIONS: "--max_old_space_size=4096"
        
    triggering:
      events:
        - push
        - pull_request
      branch_patterns:
        - pattern: "main"
          include: true
      cancel_previous_builds: true
          
    scripts:
      # 1. Change to project directory
      - name: Change to project directory
        script: |
          cd "$PROJECT_DIR"
          pwd
          ls -la

      # 2. Install JS dependencies
      - name: Install npm dependencies
        script: |
          cd "$PROJECT_DIR"
          # Remove problematic package-lock.json and reinstall
          rm -f package-lock.json
          npm install --legacy-peer-deps
          
      # 3. Install Expo CLI globally
      - name: Install Expo CLI
        script: |
          npm install -g @expo/cli@latest

      # 4. Generate the native Android project (creates android/ folder)
      - name: Expo prebuild (Android)
        script: |
          cd "$PROJECT_DIR"
          # Clear any existing android directory
          rm -rf android
          # Generate native Android project
          npx expo prebuild --platform android --non-interactive --no-install --clean
          
      # 5. Verify Android project was created
      - name: Verify Android project
        script: |
          cd "$PROJECT_DIR"
          if [ ! -d "android" ]; then
            echo "‚ùå Android directory not created by expo prebuild"
            exit 1
          fi
          if [ ! -f "android/gradlew" ]; then
            echo "‚ùå gradlew not found in android directory"
            exit 1
          fi
          echo "‚úÖ Android project structure verified"
          ls -la android/

      # 6. Decode Android keystore (optional)
      - name: Decode Android keystore (optional)
        script: |
          cd "$PROJECT_DIR"
          # Only runs if keystore variables are set in the android_keystore group
          if [ -n "$CM_KEYSTORE" ]; then
            echo "üì± Setting up Android keystore..."
            mkdir -p android/app
            echo "$CM_KEYSTORE" | base64 --decode > android/app/$CM_KEYSTORE_FILENAME
            echo "‚úÖ Android keystore configured"
          else
            echo "‚ÑπÔ∏è No keystore configured - building unsigned APK"
          fi

      # 7. Compile a release APK
      - name: Compile Android APK
        script: |
          cd "$PROJECT_DIR"/android
          # Make gradlew executable
          chmod +x ./gradlew
          # Build the APK
          ./gradlew assembleRelease --warning-mode all --no-daemon --stacktrace

    artifacts:
      # Collect APK(s) produced during the build
      - "$PROJECT_DIR/android/app/build/outputs/**/*.apk"

    # Optional: You can configure email notifications in Codemagic UI instead of here 