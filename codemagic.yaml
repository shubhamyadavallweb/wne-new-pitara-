workflows:
  expo-android:
    # Builds a debug APK on pull requests for testing purposes.
    name: NewPitara – Android APK (Debug)
    max_build_duration: 90
    instance_type: mac_mini_m2
    
    environment:
      node: "18.18.0"
      java: "17"
      vars:
        PROJECT_DIR: "apps/mobile"
        NODE_OPTIONS: "--max_old_space_size=4096"
        NODE_ENV: "development"
        EXPO_NO_DOTENV: "1"
        
    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: "*" # Build on any branch PR
          include: true
      # a new build.
      cancel_previous_builds: true
          
    scripts:
      - name: Change to project directory
        script: |
          cd "$PROJECT_DIR"
          echo "📁 Working directory: $(pwd)"

      - name: Install npm dependencies
        script: |
          cd "$PROJECT_DIR"
          npm cache clean --force
          npm ci --legacy-peer-deps --no-audit --no-fund
          
      - name: Install Expo CLI
        script: |
          npm install -g @expo/cli@^0.16.1
          npx expo --version
          echo "✅ Expo CLI installed successfully"

      - name: Expo prebuild (Android)
        script: |
          cd "$PROJECT_DIR"
          rm -rf android
          npx expo prebuild --platform android --clean --no-install
          
      - name: Build Android Debug APK
        script: |
          cd "$PROJECT_DIR"/android
          chmod +x ./gradlew
          ./gradlew assembleDebug --no-daemon --stacktrace
          
    artifacts:
      - "$PROJECT_DIR/android/app/build/outputs/apk/debug/*.apk"

  expo-android-release:
    # Builds a signed, production-ready release APK on push to the main branch.
    name: NewPitara – Android Release APK (Expo)
    max_build_duration: 90
    instance_type: mac_mini_m2
    
    environment:
      node: "18.18.0"
      java: "17"
      vars:
        PROJECT_DIR: "apps/mobile"
        NODE_OPTIONS: "--max_old_space_size=4096"
        NODE_ENV: "production"
        EXPO_NO_DOTENV: "1"
      groups:
        - x # IMPORTANT: Ensure this group contains all required secrets
        
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "main"
          include: true
      # a new build.
      cancel_previous_builds: true
          
    scripts:
      - name: Change to project directory
        script: |
          cd "$PROJECT_DIR"
          echo "📁 Working directory: $(pwd)"

      - name: Install npm dependencies
        script: |
          echo "📁 Installing dependencies from monorepo root: $(pwd)"
          npm cache clean --force
          npm ci --legacy-peer-deps --no-audit --no-fund
          
      - name: Install Expo CLI
        script: |
          npm install -g @expo/cli@^0.16.1
          npx expo --version
          echo "✅ Expo CLI installed successfully"

      - name: Set up environment variables
        script: |
          cd "$PROJECT_DIR"
          cat > .env << EOF
          EXPO_PUBLIC_SUPABASE_URL=$EXPO_PUBLIC_SUPABASE_URL
          EXPO_PUBLIC_SUPABASE_ANON_KEY=$EXPO_PUBLIC_SUPABASE_ANON_KEY
          SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY
          SUPABASE_ACCESS_TOKEN=$SUPABASE_ACCESS_TOKEN
          SUPABASE_PROJECT_REF=$SUPABASE_PROJECT_REF
          SUPABASE_DB_URL=$SUPABASE_DB_URL
          EXPO_PUBLIC_RAZORPAY_KEY=$EXPO_PUBLIC_RAZORPAY_KEY
          EXPO_PUBLIC_RAZORPAY_KEY_SECRET=$EXPO_PUBLIC_RAZORPAY_KEY_SECRET
          EXPO_PUBLIC_RAZORPAY_WEBHOOK_SECRET=$EXPO_PUBLIC_RAZORPAY_WEBHOOK_SECRET
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_SECRET=$EXPO_PUBLIC_GOOGLE_WEB_CLIENT_SECRET
          EXPO_PUBLIC_BYPASS_AUTH=$EXPO_PUBLIC_BYPASS_AUTH
          EXPO_PUBLIC_BUNNY_CDN_URL=$EXPO_PUBLIC_BUNNY_CDN_URL
          EOF
          echo "✅ Environment variables configured"

      - name: Expo prebuild (Android)
        script: |
          cd "$PROJECT_DIR"
          rm -rf node_modules/.cache
          export CI=1
          npx expo prebuild --platform android --clean --no-install
          if [ -d "android" ]; then
            echo "✅ Android prebuild completed successfully"
          else
            echo "❌ Android prebuild failed - android directory not created"
            exit 1
          fi

      - name: Configure keystore for signing
        script: |
          set -e
          set -x
          cd "$PROJECT_DIR"
          
          echo "🔍 Current directory: $(pwd)"
          echo "📁 Listing files:"
          ls -la
          
          # Use existing key.properties from root
          if [ -f "../../android/key.properties" ]; then
            echo "✅ Using existing key.properties from root"
            cp ../../android/key.properties android/
            cp -r ../../android/keystores android/
          elif [ -f "keystore_base64.txt" ]; then
            echo "✅ Found keystore_base64.txt file."
            mkdir -p android/app
            echo "🔑 Decoding keystore from file..."
            cat keystore_base64.txt | base64 --decode > android/app/"$CM_KEYSTORE_FILENAME"
            
            if [ ! -s "android/app/$CM_KEYSTORE_FILENAME" ]; then
                echo "❌ FATAL: Keystore decoding failed."
                exit 1
            fi
            
            cat >> android/gradle.properties <<EOF
          MYAPP_UPLOAD_STORE_FILE=app/$CM_KEYSTORE_FILENAME
          MYAPP_UPLOAD_STORE_PASSWORD=$CM_KEYSTORE_PASSWORD
          MYAPP_UPLOAD_KEY_ALIAS=$CM_KEY_ALIAS
          MYAPP_UPLOAD_KEY_PASSWORD=$CM_KEY_PASSWORD
          EOF
          else
            echo "❌ No keystore configuration found!"
            exit 1
          fi
          
          # Add Gradle optimization
          cat >> android/gradle.properties <<EOF
          org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g
          org.gradle.daemon=false
          org.gradle.configureondemand=false
          org.gradle.parallel=false
          EOF
          echo "✅ Android keystore configured"

      - name: Build Android APK
        script: |
          cd "$PROJECT_DIR"/android
          
          echo "🔍 Checking gradle wrapper..."
          chmod +x ./gradlew
          
          echo "🧹 Cleaning project..."
          ./gradlew clean --no-daemon --stacktrace
          
          echo "🔨 Building Release APK..."
          ./gradlew assembleRelease --no-daemon --stacktrace --info
          
          echo "📦 Checking for APK files..."
          find . -name "*.apk" -type f | sort
          
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            echo "✅ APK built successfully!"
            ls -la app/build/outputs/apk/release/
          else
            echo "❌ APK not found!"
            echo "📁 Checking build outputs:"
            find app/build/outputs -type f | head -20 || echo "No build outputs found"
            exit 1
          fi

      - name: Copy APK to artifacts directory
        script: |
          echo "📁 Creating artifacts directory..."
          mkdir -p $CM_BUILD_DIR/artifacts
          
          echo "🔍 Searching for APK files..."
          find $PROJECT_DIR/android -name "*.apk" -type f
          
          if [ -f "$PROJECT_DIR/android/app/build/outputs/apk/release/app-release.apk" ]; then
            echo "✅ Copying main APK..."
            cp "$PROJECT_DIR/android/app/build/outputs/apk/release/app-release.apk" "$CM_BUILD_DIR/artifacts/pitara-release.apk"
          fi
          
          # Copy all APK files found
          find $PROJECT_DIR/android/app/build/outputs/apk -name "*.apk" -exec cp {} $CM_BUILD_DIR/artifacts/ \; 2>/dev/null || echo "No APK files found in standard location"
          
          echo "📦 Final artifacts:"
          ls -la $CM_BUILD_DIR/artifacts/ || echo "No artifacts directory found"

    artifacts:
      - $PROJECT_DIR/android/app/build/outputs/apk/release/*.apk
      - $CM_BUILD_DIR/artifacts/*.apk
      
    publishing:
      email:
        recipients:
          - pitarasupabase@gmail.com
        notify:
          success: true
          failure: true 