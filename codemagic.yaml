workflows:
  expo-android:
    # Builds a debug APK on pull requests for testing purposes.
    name: NewPitara ‚Äì Android APK (Debug)
    max_build_duration: 90
    instance_type: mac_mini_m2
    
    environment:
      node: "18.18.0"
      java: "17"
      vars:
        PROJECT_DIR: "apps/mobile"
        NODE_OPTIONS: "--max_old_space_size=4096"
        NODE_ENV: "development"
        EXPO_NO_DOTENV: "1"
        
    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: "*" # Build on any branch PR
          include: true
      # a new build.
      cancel_previous_builds: true
          
    scripts:
      - name: Change to project directory
        script: |
          cd "$PROJECT_DIR"
          echo "üìÅ Working directory: $(pwd)"

      - name: Install npm dependencies
        script: |
          echo "üìÅ Installing dependencies from monorepo root: $(pwd)"
          npm cache clean --force
          npm install --legacy-peer-deps --no-audit --no-fund
          echo "üì¶ Installing workspace dependencies..."
          cd "$PROJECT_DIR"
          npm install --legacy-peer-deps --no-audit --no-fund
          
      - name: Install Expo CLI
        script: |
          npm install -g @expo/cli@^0.16.1
          npx expo --version
          echo "‚úÖ Expo CLI installed successfully"

      - name: Expo prebuild (Android)
        script: |
          cd "$PROJECT_DIR"
          rm -rf android
          npx expo prebuild --platform android --clean --no-install
          
      - name: Build Android Debug APK
        script: |
          cd "$PROJECT_DIR"/android
          chmod +x ./gradlew
          ./gradlew assembleDebug --no-daemon --stacktrace
          
    artifacts:
      - "$PROJECT_DIR/android/app/build/outputs/apk/debug/*.apk"

  expo-android-release:
    # Builds a signed, production-ready release APK using EAS Build
    name: NewPitara ‚Äì Android Release APK (EAS Build)
    max_build_duration: 90
    instance_type: mac_mini_m2
    
    environment:
      node: "18.18.0"
      vars:
        PROJECT_DIR: "apps/mobile"
        NODE_OPTIONS: "--max_old_space_size=4096"
        NODE_ENV: "production"
        EXPO_NO_DOTENV: "1"
        EXPO_TOKEN: "m56pg1UORIoBcI27mbYsBNLvwnm-AkieA4nLp4mz" # Direct token value as fallback
      groups:
        - x # IMPORTANT: Ensure this group contains all required secrets including EXPO_TOKEN
        
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "main"
          include: true
      # a new build.
      cancel_previous_builds: true
          
    scripts:
      - name: Change to project directory
        script: |
          cd "$PROJECT_DIR"
          echo "üìÅ Working directory: $(pwd)"

      - name: Install npm dependencies
        script: |
          echo "üìÅ Installing dependencies from monorepo root: $(pwd)"
          npm cache clean --force
          npm install --legacy-peer-deps --no-audit --no-fund
          echo "üì¶ Installing workspace dependencies..."
          cd "$PROJECT_DIR"
          npm install --legacy-peer-deps --no-audit --no-fund
          
      - name: Install EAS CLI
        script: |
          npm install -g @expo/cli@^0.16.1 eas-cli@latest
          npx expo --version
          eas --version
          echo "‚úÖ EAS CLI installed successfully"

      - name: Set up environment variables
        script: |
          cd "$PROJECT_DIR"
          cat > .env << EOF
          EXPO_PUBLIC_SUPABASE_URL=$EXPO_PUBLIC_SUPABASE_URL
          EXPO_PUBLIC_SUPABASE_ANON_KEY=$EXPO_PUBLIC_SUPABASE_ANON_KEY
          SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY
          SUPABASE_ACCESS_TOKEN=$SUPABASE_ACCESS_TOKEN
          SUPABASE_PROJECT_REF=$SUPABASE_PROJECT_REF
          SUPABASE_DB_URL=$SUPABASE_DB_URL
          EXPO_PUBLIC_RAZORPAY_KEY=$EXPO_PUBLIC_RAZORPAY_KEY
          EXPO_PUBLIC_RAZORPAY_KEY_SECRET=$EXPO_PUBLIC_RAZORPAY_KEY_SECRET
          EXPO_PUBLIC_RAZORPAY_WEBHOOK_SECRET=$EXPO_PUBLIC_RAZORPAY_WEBHOOK_SECRET
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_SECRET=$EXPO_PUBLIC_GOOGLE_WEB_CLIENT_SECRET
          EXPO_PUBLIC_BYPASS_AUTH=$EXPO_PUBLIC_BYPASS_AUTH
          EXPO_PUBLIC_BUNNY_CDN_URL=$EXPO_PUBLIC_BUNNY_CDN_URL
          EOF
          echo "‚úÖ Environment variables configured"

      - name: Configure EAS credentials
        script: |
          cd "$PROJECT_DIR"
          echo "üîê Setting up EAS credentials..."
          
          # Debug: Check if EXPO_TOKEN is available
          echo "üîç Checking EXPO_TOKEN availability..."
          if [ -z "$EXPO_TOKEN" ]; then
            echo "‚ùå EXPO_TOKEN environment variable is not set!"
            echo "Please ensure EXPO_TOKEN is in variable group 'x' in Codemagic"
            exit 1
          else
            echo "‚úÖ EXPO_TOKEN is available (length: ${#EXPO_TOKEN})"
            echo "üîç Token starts with: ${EXPO_TOKEN:0:6}..."
          fi
          
          # Set environment variables for Expo authentication
          export CI=1
          export EXPO_TOKEN="$EXPO_TOKEN"
          export EXPO_NO_TELEMETRY=1
          
          # Clear any existing auth state
          echo "üîÑ Clearing existing auth state..."
          rm -rf ~/.expo 2>/dev/null || true
          
          echo "üîë Verifying EAS authentication..."
          
          # Test authentication with better error handling
          echo "üîë Testing Expo authentication..."
          if npx expo whoami 2>&1 | tee /tmp/expo_auth.log; then
            echo "‚úÖ Successfully authenticated with Expo"
            echo "üë§ Current user: $(npx expo whoami)"
          else
            echo "‚ùå Authentication failed with EXPO_TOKEN"
            echo "üìã Error details:"
            cat /tmp/expo_auth.log || echo "No error log found"
            
            echo "üîç Debugging information:"
            echo "- Token length: ${#EXPO_TOKEN}"
            echo "- Token starts with: ${EXPO_TOKEN:0:10}..."
            echo "- CI environment: $CI"
            echo "- Working directory: $(pwd)"
            echo ""
            echo "‚ùå EXPO_TOKEN authentication failed!"
            echo "Please verify:"
            echo "1. EXPO_TOKEN is correctly set in Codemagic variable group 'x'"
            echo "2. Token was generated with: expo token:create"
            echo "3. Token has proper permissions for EAS builds"
            echo "4. Token is not expired or revoked"
            exit 1
          fi
          
          echo "‚úÖ EAS credentials configured successfully"

      - name: Build Android APK with EAS
        script: |
          cd "$PROJECT_DIR"
          
          echo "üî® Building Android APK using EAS..."
          
          # Set environment variables for this step
          export CI=1
          export EXPO_TOKEN="$EXPO_TOKEN"
          export EXPO_NO_TELEMETRY=1
          
          # Verify we're still authenticated
          echo "üîç Verifying authentication..."
          if ! npx expo whoami 2>/dev/null; then
            echo "‚ùå Not authenticated with Expo"
            echo "üîç EXPO_TOKEN environment variable check:"
            if [ -z "$EXPO_TOKEN" ]; then
              echo "‚ùå EXPO_TOKEN is not set in this step!"
              exit 1
            else
              echo "‚úÖ EXPO_TOKEN is available (length: ${#EXPO_TOKEN})"
            fi
            
            echo "‚ùå Authentication failed - EXPO_TOKEN may be invalid or expired"
            echo "Please regenerate EXPO_TOKEN with: expo token:create"
            exit 1
          fi
          
          echo "üë§ Building as user: $(npx expo whoami)"
          
          # eas.json already exists in the project with proper configuration
          echo "‚úÖ Using existing eas.json configuration"
          echo "üìã EAS configuration preview:"
          cat eas.json | head -10
          
          # Build APK using EAS with better error handling
          echo "üöÄ Starting EAS build..."
          echo "üìã Build configuration:"
          echo "- Platform: android"
          echo "- Profile: production"
          echo "- Build type: APK"
          echo "- Local build: yes"
          
          if ! eas build --platform android --profile production --non-interactive --local --output build.apk; then
            echo "‚ùå EAS build failed!"
            echo "üìã Build logs above should contain error details"
            echo "üîç Common solutions:"
            echo "1. Check if all required environment variables are set"
            echo "2. Verify eas.json configuration"
            echo "3. Ensure app.json/app.config.js is properly configured"
            echo "4. Check for any missing dependencies"
            exit 1
          fi
          
          echo "üì¶ Checking for APK files..."
          ls -la *.apk 2>/dev/null || echo "No APK files found in current directory"
          
          if [ -f "build.apk" ]; then
            echo "‚úÖ APK built successfully!"
            ls -la build.apk
            echo "üìä APK size: $(du -h build.apk | cut -f1)"
          else
            echo "‚ùå APK not found!"
            echo "üìÅ Checking for any APK files:"
            find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found anywhere"
            exit 1
          fi

      - name: Copy APK to artifacts directory
        script: |
          echo "üìÅ Creating artifacts directory..."
          mkdir -p $CM_BUILD_DIR/artifacts
          
          cd "$PROJECT_DIR"
          echo "üîç Looking for APK files..."
          find . -name "*.apk" -type f
          
          if [ -f "build.apk" ]; then
            echo "‚úÖ Copying main APK..."
            cp "build.apk" "$CM_BUILD_DIR/artifacts/pitara-release.apk"
          fi
          
          # Copy any other APK files found
          find . -name "*.apk" -exec cp {} $CM_BUILD_DIR/artifacts/ \; 2>/dev/null || echo "No additional APK files found"
          
          echo "üì¶ Final artifacts:"
          ls -la $CM_BUILD_DIR/artifacts/ || echo "No artifacts directory found"

    artifacts:
      - $PROJECT_DIR/android/app/build/outputs/apk/release/*.apk
      - $CM_BUILD_DIR/artifacts/*.apk
      
    publishing:
      email:
        recipients:
          - pitarasupabase@gmail.com
        notify:
          success: true
          failure: true 