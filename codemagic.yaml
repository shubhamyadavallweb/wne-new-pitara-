workflows:
  expo-android:
    # Builds a debug APK on pull requests for testing purposes.
    name: NewPitara – Android APK (Debug)
    max_build_duration: 90
    instance_type: mac_mini_m2
    
    environment:
      node: "18.18.0"
      java: "17"
      vars:
        PROJECT_DIR: "apps/mobile"
        NODE_OPTIONS: "--max_old_space_size=4096"
        NODE_ENV: "development"
        EXPO_NO_DOTENV: "1"
        
    triggering:
      events:
        - pull_request
      branch_patterns:
        - pattern: "*" # Build on any branch PR
          include: true
      # a new build.
      cancel_previous_builds: true
          
    scripts:
      - name: Change to project directory
        script: |
          cd "$PROJECT_DIR"
          echo "📁 Working directory: $(pwd)"

      - name: Install npm dependencies
        script: |
          cd "$PROJECT_DIR"
          npm cache clean --force
          npm ci --legacy-peer-deps --no-audit --no-fund
          
      - name: Install Expo CLI
        script: |
          npm install -g @expo/cli@^0.16.1
          npx expo --version
          echo "✅ Expo CLI installed successfully"

      - name: Expo prebuild (Android)
        script: |
          cd "$PROJECT_DIR"
          rm -rf android
          npx expo prebuild --platform android --clean --no-install
          
      - name: Build Android Debug APK
        script: |
          cd "$PROJECT_DIR"/android
          chmod +x ./gradlew
          ./gradlew assembleDebug --no-daemon --stacktrace
          
    artifacts:
      - "$PROJECT_DIR/android/app/build/outputs/apk/debug/*.apk"

  expo-android-release:
    # Builds a signed, production-ready release APK on push to the main branch.
    name: NewPitara – Android Release APK (Expo)
    max_build_duration: 90
    instance_type: mac_mini_m2
    
    environment:
      node: "18.18.0"
      java: "17"
      vars:
        PROJECT_DIR: "apps/mobile"
        NODE_OPTIONS: "--max_old_space_size=4096"
        NODE_ENV: "production"
        EXPO_NO_DOTENV: "1"
      groups:
        - x # IMPORTANT: Ensure this group contains all required secrets
        
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "main"
          include: true
      # a new build.
      cancel_previous_builds: true
          
    scripts:
      - name: Change to project directory
        script: |
          cd "$PROJECT_DIR"
          echo "📁 Working directory: $(pwd)"

      - name: Install npm dependencies
        script: |
          cd "$PROJECT_DIR"
          npm cache clean --force
          npm ci --legacy-peer-deps --no-audit --no-fund
          
      - name: Install Expo CLI
        script: |
          npm install -g @expo/cli@^0.16.1
          npx expo --version
          echo "✅ Expo CLI installed successfully"

      - name: Set up environment variables
        script: |
          cd "$PROJECT_DIR"
          cat > .env << EOF
          EXPO_PUBLIC_SUPABASE_URL=$EXPO_PUBLIC_SUPABASE_URL
          EXPO_PUBLIC_SUPABASE_ANON_KEY=$EXPO_PUBLIC_SUPABASE_ANON_KEY
          SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY
          SUPABASE_ACCESS_TOKEN=$SUPABASE_ACCESS_TOKEN
          SUPABASE_PROJECT_REF=$SUPABASE_PROJECT_REF
          SUPABASE_DB_URL=$SUPABASE_DB_URL
          EXPO_PUBLIC_RAZORPAY_KEY=$EXPO_PUBLIC_RAZORPAY_KEY
          EXPO_PUBLIC_RAZORPAY_KEY_SECRET=$EXPO_PUBLIC_RAZORPAY_KEY_SECRET
          EXPO_PUBLIC_RAZORPAY_WEBHOOK_SECRET=$EXPO_PUBLIC_RAZORPAY_WEBHOOK_SECRET
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID=$EXPO_PUBLIC_GOOGLE_IOS_CLIENT_ID
          EXPO_PUBLIC_GOOGLE_WEB_CLIENT_SECRET=$EXPO_PUBLIC_GOOGLE_WEB_CLIENT_SECRET
          EXPO_PUBLIC_BYPASS_AUTH=$EXPO_PUBLIC_BYPASS_AUTH
          EXPO_PUBLIC_BUNNY_CDN_URL=$EXPO_PUBLIC_BUNNY_CDN_URL
          EOF
          echo "✅ Environment variables configured"

      - name: Expo prebuild (Android)
        script: |
          cd "$PROJECT_DIR"
          rm -rf node_modules/.cache
          export CI=1
          npx expo prebuild --platform android --clean --no-install
          if [ -d "android" ]; then
            echo "✅ Android prebuild completed successfully"
          else
            echo "❌ Android prebuild failed - android directory not created"
            exit 1
          fi

      - name: Configure keystore for signing
        script: |
          set -e
          set -x
          cd "$PROJECT_DIR"
          if [ -z "$CM_KEYSTORE_FILENAME" ]; then
            echo "❌ Error: CM_KEYSTORE_FILENAME is not set."
            exit 1
          fi
          TRIMMED_KEYSTORE=$(printf "%s" "$CM_KEYSTORE" | tr -d '[:space:]')
          if [ -z "$TRIMMED_KEYSTORE" ]; then
            echo "❌ FATAL: CM_KEYSTORE environment variable is empty or contains only whitespace."
            exit 1
          fi
          echo "✅ CM_KEYSTORE variable is present."
          mkdir -p android/app
          echo "🔑 Decoding keystore..."
          printf "%s" "$TRIMMED_KEYSTORE" | base64 --decode > android/app/"$CM_KEYSTORE_FILENAME"
          if [ ! -s "android/app/$CM_KEYSTORE_FILENAME" ]; then
              echo "❌ FATAL: Keystore decoding failed. The output file is empty."
              exit 1
          fi
          echo "✅ Keystore file created successfully."
          set +x
          cat >> android/gradle.properties <<EOF
          MYAPP_UPLOAD_STORE_FILE=app/$CM_KEYSTORE_FILENAME
          MYAPP_UPLOAD_STORE_PASSWORD=$CM_KEYSTORE_PASSWORD
          MYAPP_UPLOAD_KEY_ALIAS=$CM_KEY_ALIAS
          MYAPP_UPLOAD_KEY_PASSWORD=$CM_KEY_PASSWORD
          org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g
          EOF
          echo "✅ Android keystore and Gradle memory configured"

      - name: Build Android APK
        script: |
          cd "$PROJECT_DIR"/android
          chmod +x ./gradlew
          ./gradlew clean
          echo "🔨 Building APK..."
          ./gradlew assembleRelease --no-daemon --stacktrace
          echo "✅ Build completed"
          find . -name "*.apk" | sort

      - name: Copy APK to artifacts directory
        script: |
          mkdir -p $CM_BUILD_DIR/artifacts
          find $PROJECT_DIR/android/app/build/outputs/apk -name "*.apk" -exec cp {} $CM_BUILD_DIR/artifacts/ \;
          ls -la $CM_BUILD_DIR/artifacts/
          cp $PROJECT_DIR/android/app/build/outputs/apk/release/app-release.apk $CM_BUILD_DIR/artifacts/pitara-release.apk || echo "Standard APK path not found"

    artifacts:
      - $PROJECT_DIR/android/app/build/outputs/apk/release/*.apk
      - $CM_BUILD_DIR/artifacts/*.apk 